version: 2.1
orbs:
  slack: circleci/slack@4.1
  kubernetes: circleci/kubernetes@1.3.0
commands:
  destroy-environment:
    description: Destroy eksctl kubernetes stack given a workflow ID.
    parameters:
      clusterName:
        type: string
    steps:
      - run:
          name: Destroy Cluster
          when: on_fail
          command: |
            eksctl delete cluster --name="<< parameters.clusterName >>"

jobs:
  build-app:
    docker:
    - image: cimg/python:3.10.5
    steps:
      - checkout
      - restore_cache:
          keys: [build-app]
      - run:
          name: Setup and Activate Virtual Environment
          command: |
            python3 -m venv ~/.pyvenv
            source ~/.pyvenv/bin/activate
            which python
      - run:
          name: Install dependencies
          command: |
            #pip install typed-ast --upgrade
            #python3 -m pip install --upgrade pip            
            pip install --upgrade pip &&  pip install -r requirements.txt
            pip install pylint
      - run:
          name: Lint code
          command: |
            pylint --disable=R,C,W1203,W1202 app.py
    #  - run:
    #      name: Run App Locally
    #      command: |
    #        nohup python app.py &
    #  - run:
    #      name: Test App Locally
    #      command: |
    #        sleep 20
    #        color=`curl http://localhost:8080/color`
    #        echo "Current Colour is $color"
      - save_cache:
          paths: [.]
          key: build-app
  
  build-docker-image:
    docker:
    - image: cimg/base:2022.06
    working_directory: /tmp/workspace    
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys: [build-app]
      - run:
          name: Update Environment Variables in Dockerfile
          command: |
            oldColor=`grep APP_COLOR Dockerfile | cut -d " " -f2`
            newColor=`grep APP_COLOR app_properties.txt`
            # Replace color from app_properties.txt in Dockerfile
            sed -i "s/$oldColor/$newColor/" Dockerfile

            oldVersion=`grep VERSION Dockerfile | cut -d " " -f2`
            newVersion=`grep VERSION app_properties.txt`
            # Replace version from app_properties.txt in Dockerfile
            sed -i "s/$oldVersion/$newVersion/" Dockerfile
      - run:
          name: Build & Push Docker Image
          command: |
            cat Dockerfile
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
            tagPrefix=`grep TAG app_properties.txt | cut -d "=" -f2`
            version=`grep VERSION app_properties.txt | cut -d "=" -f2`
            imagePath=`echo "${tagPrefix}:${version}"`
            echo $imagePath > imagePath.txt
            docker build -t $imagePath .   
            docker images
            docker image push $imagePath
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - imagePath.txt

  create-kubernetes-cluster:
    docker:
    - image: amazon/aws-cli
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            #Install eksctl#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: Retrieve Previous Cluster Name
          command: |
            echo $(aws eks list-clusters --query "clusters[0]" --output text) > oldClusterName.txt
            cat oldClusterName.txt
      - run:
          name: Create New Kubernetes Cluster
          command: |
            eksctl create cluster --name="capstone-${CIRCLE_WORKFLOW_ID:0:7}" --node-type t2.small
      - destroy-environment:
          clusterName: capstone-${CIRCLE_WORKFLOW_ID:0:7}        
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - oldClusterName.txt

  deploy-app-to-cluster:
    docker:
    - image: amazon/aws-cli
    working_directory: /tmp/workspace
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
            #Install eksctl if destroy environment is called#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
      - attach_workspace:
          at: /tmp/workspace            
      - run:
          name: Deploy App
          command: |
            aws eks update-kubeconfig --name "capstone-${CIRCLE_WORKFLOW_ID:0:7}"
            export KUBECONFIG=/root/.kube/config
            pwd
            ls -l
            imagePath=`cat imagePath.txt`
            #Create Deployment with Image pushed to DockerHub before #
            kubectl create deployment mycolor --image $imagePath --replicas 2
            kubectl rollout status deployment/mycolor
            echo "Deploying LB Service"
            kubectl expose deployment mycolor --name lbservice --type LoadBalancer --port 8080
      - destroy-environment:
          clusterName: capstone-${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:
    - image: cimg/base:2022.06
    working_directory: /tmp/workspace
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            #Install eksctl#
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: Delete Old Cluster
          command: |            
            oldClusterName=`cat oldClusterName.txt`
            eksctl delete cluster --name=$oldClusterName 

workflows:
  default:
    jobs:
      - build-app
      - build-docker-image:
          requires: [build-app]
      - create-kubernetes-cluster:
          requires: [build-docker-image]
      - deploy-app-to-cluster:
          requires: [create-kubernetes-cluster]
      - cleanup:
          requires: [deploy-app-to-cluster] 
